name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 코드 체크아웃
      - uses: actions/checkout@v3
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Verify Java version
        run: java -version

      # Gradle Wrapper 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod 777 ./gradlew

        # Gradle 캐시 설정 (빌드 속도 향상)
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 임시 설정 -> 추후 ConfigMap 활용 예정
      - name: create application.yml
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" | base64 --decode > src/main/resources/application.yml

      # Gradle 빌드 실행 + 테스트를 포함
      - name: Build with Gradle
        run: ./gradlew clean build --no-daemon -Djava.net.preferIPv4Stack=true -Dspring.profiles.active=ci

      # 이미지를 만들고 DockerHub 에 Push
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker
        run: docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/member-server .
        
      - name: Push Docker
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/member-server:latest
